import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { useSearchParams, useNavigate, Link } from 'react-router-dom';
import './ResetMatKhau.css';

const ResetMatKhau = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const token = searchParams.get('token');

  const [formData, setFormData] = useState({
    newPassword: '',
    confirmPassword: ''
  });

  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [isVerifying, setIsVerifying] = useState(true);
  const [isTokenValid, setIsTokenValid] = useState(false);
  const [message, setMessage] = useState('');
  const [isSuccess, setIsSuccess] = useState(false);

  // Wrap verifyToken in useCallback to memoize it
  const verifyToken = useCallback(async () => {
    try {
      await axios.post('http://localhost:8080/auth/verify-reset-token', { token });
      setIsTokenValid(true);
      setMessage('');
    } catch (error) {
      setIsTokenValid(false);
      if (error.response?.data?.message) {
        setMessage(error.response.data.message);
      } else {
        setMessage('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
      }
    } finally {
      setIsVerifying(false);
    }
  }, [token]); // Include token as dependency

  useEffect(() => {
    if (!token) {
      setMessage('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
      setIsVerifying(false);
      return;
    }

    verifyToken();
  }, [token, verifyToken]); // Include verifyToken as dependency

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.newPassword) {
      newErrors.newPassword = 'M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (formData.newPassword.length < 6) {
      newErrors.newPassword = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }
    
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u';
    } else if (formData.newPassword !== formData.confirmPassword) {
      newErrors.confirmPassword = 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp';
    }
    
    return newErrors;
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    if (errors[e.target.name]) {
      setErrors({ ...errors, [e.target.name]: '' });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const validationErrors = validateForm();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    setIsLoading(true);
    setErrors({});
    setMessage('');

    try {
      const response = await axios.post('http://localhost:8080/auth/reset-password', {
        token: token,
        newPassword: formData.newPassword
      });
      
      setIsSuccess(true);
      setMessage(response.data.message || 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!');
      
      // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p sau 3 gi√¢y
      setTimeout(() => {
        navigate('/login');
      }, 3000);
      
    } catch (error) {
      if (error.response?.data?.message) {
        setMessage(error.response.data.message);
      } else if (error.response?.status === 400) {
        setMessage('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
      } else {
        setMessage('L·ªói k·∫øt n·ªëi m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Loading state khi ƒëang verify token
  if (isVerifying) {
    return (
      <div className="reset-password-container">
        <div className="reset-password-form">
          <div className="loading-section">
            <div className="loading-spinner large"></div>
            <h2>ƒêang x√°c th·ª±c...</h2>
            <p>Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
          </div>
        </div>
      </div>
    );
  }

  // Token kh√¥ng h·ª£p l·ªá
  if (!isTokenValid) {
    return (
      <div className="reset-password-container">
        <div className="reset-password-form">
          <div className="error-section">
            <div className="error-icon">‚ö†</div>
            <h2>Token kh√¥ng h·ª£p l·ªá</h2>
            <div className="message error">
              <span>{message}</span>
            </div>
            <div className="form-links">
              <Link to="/forgot-password" className="primary-link">
                G·ª≠i l·∫°i email kh√¥i ph·ª•c
              </Link>
              <p>
                <Link to="/login">Quay l·∫°i ƒëƒÉng nh·∫≠p</Link>
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (isSuccess) {
    return (
      <div className="reset-password-container">
        <div className="reset-password-form">
          <div className="success-section">
            <div className="success-icon">‚úì</div>
            <h2>Th√†nh c√¥ng!</h2>
            <div className="message success">
              <span>{message}</span>
            </div>
            <div className="success-info">
              <p>B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p sau <span id="countdown">3</span> gi√¢y...</p>
              <Link to="/login" className="primary-link">
                ƒêƒÉng nh·∫≠p ngay
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="reset-password-container">
      <form className="reset-password-form" onSubmit={handleSubmit}>
        <div className="form-header">
          <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
          <p className="form-description">
            Nh·∫≠p m·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n
          </p>
        </div>

        {message && !isSuccess && (
          <div className="message error">
            <span className="message-icon">‚ö†</span>
            <span>{message}</span>
          </div>
        )}

        <div className="input-group">
          <label htmlFor="newPassword">
            <span className="label-icon">üîê</span>
            M·∫≠t kh·∫©u m·ªõi
          </label>
          <input
            type="password"
            id="newPassword"
            name="newPassword"
            value={formData.newPassword}
            onChange={handleChange}
            className={errors.newPassword ? 'error' : ''}
            placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
            disabled={isLoading}
          />
          {errors.newPassword && <span className="error-message">{errors.newPassword}</span>}
        </div>

        <div className="input-group">
          <label htmlFor="confirmPassword">
            <span className="label-icon">üîí</span>
            X√°c nh·∫≠n m·∫≠t kh·∫©u
          </label>
          <input
            type="password"
            id="confirmPassword"
            name="confirmPassword"
            value={formData.confirmPassword}
            onChange={handleChange}
            className={errors.confirmPassword ? 'error' : ''}
            placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
            disabled={isLoading}
          />
          {errors.confirmPassword && <span className="error-message">{errors.confirmPassword}</span>}
        </div>

        <button 
          type="submit" 
          className={`submit-btn ${isLoading ? 'loading' : ''}`}
          disabled={isLoading}
        >
          {isLoading ? (
            <>
              <span className="loading-spinner"></span>
              ƒêang c·∫≠p nh·∫≠t...
            </>
          ) : (
            'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u'
          )}
        </button>

        <div className="form-links">
          <p>
            <Link to="/login" className="back-link">
              ‚Üê Quay l·∫°i ƒëƒÉng nh·∫≠p
            </Link>
          </p>
        </div>
      </form>
    </div>
  );
};

export default ResetMatKhau;