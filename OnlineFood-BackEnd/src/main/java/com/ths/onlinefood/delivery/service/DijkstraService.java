package com.ths.onlinefood.delivery.service;

import com.graphhopper.GraphHopper;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.index.LocationIndex;
import com.graphhopper.storage.index.Snap;
import com.ths.onlinefood.delivery.model.DeliveryRoute;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class DijkstraService {
    
    private final GraphHopper graphHopper;
    
    /**
     * DIJKSTRA THU·∫¶N T√öY - D√πng d·ªØ li·ªáu OSM t·ª´ GraphHopper
     */
    public DeliveryRoute findShortestPath(Double latStart, Double lonStart, 
                                          Double latEnd, Double lonEnd) {
        
        log.info("üîç Dijkstra: ({}, {}) ‚Üí ({}, {})", 
                 latStart, lonStart, latEnd, lonEnd);
        
        try {
            // B∆∞·ªõc 1: L·∫•y graph t·ª´ GraphHopper
            Graph graph = graphHopper.getBaseGraph();
            LocationIndex locationIndex = graphHopper.getLocationIndex();
            
            // B∆∞·ªõc 2: T√¨m node g·∫ßn nh·∫•t trong OSM graph
            Snap snapStart = locationIndex.findClosest(latStart, lonStart, 
                edgeState -> true); // Accept all edges
            Snap snapEnd = locationIndex.findClosest(latEnd, lonEnd, 
                edgeState -> true); // Accept all edges
            
            if (!snapStart.isValid() || !snapEnd.isValid()) {
                log.error("‚ùå Kh√¥ng t√¨m th·∫•y node g·∫ßn v·ªã tr√≠");
                return createDirectRoute(latStart, lonStart, latEnd, lonEnd);
            }
            
            int startNode = snapStart.getClosestNode();
            int endNode = snapEnd.getClosestNode();
            
            log.info("üìç Start Node: {} | End Node: {}", startNode, endNode);
            
            // B∆∞·ªõc 3: Ch·∫°y DIJKSTRA THU·∫¶N T√öY
            DijkstraResult result = runPureDijkstra(graph, startNode, endNode);
            
            if (result == null || result.path.isEmpty()) {
                log.error("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi");
                return createDirectRoute(latStart, lonStart, latEnd, lonEnd);
            }
            
            // B∆∞·ªõc 4: X√¢y d·ª±ng DeliveryRoute
            DeliveryRoute route = buildRoute(graph, result, latStart, lonStart, latEnd, lonEnd);
            
            log.info("‚úÖ Dijkstra: {:.2f} km, {} nodes", 
                     route.getTotalDistance(), result.path.size());
            
            return route;
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói Dijkstra: ", e);
            return createDirectRoute(latStart, lonStart, latEnd, lonEnd);
        }
    }
    
    /**
     * THU·∫¨T TO√ÅN DIJKSTRA THU·∫¶N T√öY
     * Ch·∫°y tr√™n graph OSM th·∫≠t
     */
    private DijkstraResult runPureDijkstra(Graph graph, int startNode, int endNode) {
        log.info("üöÄ B·∫Øt ƒë·∫ßu Dijkstra: {} ‚Üí {}", startNode, endNode);
        
        // Kh·ªüi t·∫°o
        Map<Integer, Double> distances = new HashMap<>();
        Map<Integer, Integer> previous = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        PriorityQueue<NodeDistance> queue = new PriorityQueue<>(
            Comparator.comparingDouble(nd -> nd.distance)
        );
        
        // Kh·ªüi t·∫°o ƒëi·ªÉm b·∫Øt ƒë·∫ßu
        distances.put(startNode, 0.0);
        queue.offer(new NodeDistance(startNode, 0.0));
        
        int iterations = 0;
        int maxIterations = 100000; // Gi·ªõi h·∫°n ƒë·ªÉ tr√°nh loop v√¥ h·∫°n
        
        // DIJKSTRA LOOP
        while (!queue.isEmpty() && iterations < maxIterations) {
            NodeDistance current = queue.poll();
            int currentNode = current.node;
            
            iterations++;
            
            // ƒê√£ thƒÉm r·ªìi
            if (visited.contains(currentNode)) {
                continue;
            }
            
            visited.add(currentNode);
            
            if (iterations % 1000 == 0) {
                log.debug("üìä Iteration {}: node {}, dist {:.2f} km", 
                         iterations, currentNode, current.distance / 1000);
            }
            
            // T√¨m th·∫•y ƒë√≠ch!
            if (currentNode == endNode) {
                log.info("üéØ T√¨m th·∫•y ƒë√≠ch sau {} iterations", iterations);
                return reconstructPath(startNode, endNode, previous, distances);
            }
            
            // Duy·ªát c√°c c·∫°nh k·ªÅ (edges)
            var edgeIterator = graph.createEdgeExplorer().setBaseNode(currentNode);
            
            while (edgeIterator.next()) {
                int neighbor = edgeIterator.getAdjNode();
                
                if (visited.contains(neighbor)) {
                    continue;
                }
                
                // L·∫•y kho·∫£ng c√°ch c·ªßa c·∫°nh (m√©t)
                double edgeDistance = edgeIterator.getDistance();
                double newDistance = current.distance + edgeDistance;
                double oldDistance = distances.getOrDefault(neighbor, Double.MAX_VALUE);
                
                // RELAX EDGE
                if (newDistance < oldDistance) {
                    distances.put(neighbor, newDistance);
                    previous.put(neighbor, currentNode);
                    queue.offer(new NodeDistance(neighbor, newDistance));
                }
            }
        }
        
        log.error("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng sau {} iterations", iterations);
        return null;
    }
    
    /**
     * T√°i t·∫°o ƒë∆∞·ªùng ƒëi t·ª´ k·∫øt qu·∫£ Dijkstra
     */
    private DijkstraResult reconstructPath(int startNode, int endNode,
                                          Map<Integer, Integer> previous,
                                          Map<Integer, Double> distances) {
        List<Integer> path = new ArrayList<>();
        Integer current = endNode;
        
        // Trace ng∆∞·ª£c t·ª´ ƒë√≠ch v·ªÅ ngu·ªìn
        while (current != null) {
            path.add(0, current);
            current = previous.get(current);
        }
        
        // Validate
        if (path.isEmpty() || path.get(0) != startNode) {
            log.error("‚ùå Path kh√¥ng h·ª£p l·ªá");
            return null;
        }
        
        double totalDistance = distances.get(endNode);
        
        DijkstraResult result = new DijkstraResult();
        result.path = path;
        result.totalDistance = totalDistance / 1000.0; // Chuy·ªÉn sang km
        
        log.info("üìä Path: {} nodes, {:.2f} km", path.size(), result.totalDistance);
        
        return result;
    }
    
    /**
     * X√¢y d·ª±ng DeliveryRoute t·ª´ path
     */
    private DeliveryRoute buildRoute(Graph graph, DijkstraResult result,
                                     Double latStart, Double lonStart,
                                     Double latEnd, Double lonEnd) {
        DeliveryRoute route = new DeliveryRoute();
        List<double[]> coordinates = new ArrayList<>();
        
        // Th√™m ƒëi·ªÉm b·∫Øt ƒë·∫ßu th·ª±c t·∫ø
        coordinates.add(new double[]{latStart, lonStart});
        
        // Th√™m t·ªça ƒë·ªô c·ªßa c√°c nodes tr√™n ƒë∆∞·ªùng ƒëi
        for (int nodeId : result.path) {
            double lat = graph.getNodeAccess().getLat(nodeId);
            double lon = graph.getNodeAccess().getLon(nodeId);
            coordinates.add(new double[]{lat, lon});
        }
        
        // Th√™m ƒëi·ªÉm k·∫øt th√∫c th·ª±c t·∫ø
        coordinates.add(new double[]{latEnd, lonEnd});
        
        route.setCoordinates(coordinates);
        route.setTotalDistance(result.totalDistance);
        route.setRouteSummary(String.format("Res Dijkstra: %.2f km qua %d nodes", 
                                           result.totalDistance, 
                                           result.path.size()));
        route.setNodes(new ArrayList<>());
        route.setSteps(new ArrayList<>());
        
        return route;
    }
    
    /**
     * T·∫°o route ƒë∆∞·ªùng th·∫≥ng (fallback)
     */
    private DeliveryRoute createDirectRoute(Double latStart, Double lonStart, 
                                           Double latEnd, Double lonEnd) {
        DeliveryRoute route = new DeliveryRoute();
        
        List<double[]> coordinates = new ArrayList<>();
        coordinates.add(new double[]{latStart, lonStart});
        coordinates.add(new double[]{latEnd, lonEnd});
        
        Double distance = calculateDistance(latStart, lonStart, latEnd, lonEnd);
        
        route.setCoordinates(coordinates);
        route.setTotalDistance(distance);
        route.setRouteSummary("ƒê∆∞·ªùng th·∫≥ng (fallback): " + String.format("%.2f", distance) + " km");
        route.setNodes(new ArrayList<>());
        route.setSteps(new ArrayList<>());
        
        return route;
    }
    
    /**
     * T√≠nh kho·∫£ng c√°ch Haversine
     */
    public Double calculateDistance(Double lat1, Double lon1, Double lat2, Double lon2) {
        final int R = 6371;
        
        Double latDistance = Math.toRadians(lat2 - lat1);
        Double lonDistance = Math.toRadians(lon2 - lon1);
        
        Double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
                + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
        
        Double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        
        return R * c;
    }
    
    // ==================== Inner Classes ====================
    
    private static class NodeDistance {
        int node;
        double distance;
        
        NodeDistance(int node, double distance) {
            this.node = node;
            this.distance = distance;
        }
    }
    
    private static class DijkstraResult {
        List<Integer> path;
        double totalDistance;
    }
}